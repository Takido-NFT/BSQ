Generate a new board into a file:
./board.pl X Y Z > foo

Memory check:
valgrind --leak-check=yes myprog arg1 arg2

(Warning, new line at end of the file)

At start, get the first line of the file and extract some data:
- The number of lines
- The "empty" character
- The "obstacle" character
- The "full" character

Check if the map is valid:
- All lines have the same size
- There is at least one line of one case
- Each line end have a new line
- The characteres in the map must be the same as in the first line
If not print "map error\n".

Start the parsing from the top corner left.

Project Buid:
- Makefile to compile all the project
- Header to connect every function between them
- C Files with necessary function for the project
- Perl file to generate board into a text file
- Text file with the board

C Files:
- main.c : takes maps as args, takes data from maps (+ first line), check if errors and send them
(struct to get maps infos)
- ft_putstr.c : print strings
- ft_strlen.c : give the length of a string
- error.c : takes maps data, check if no errors and send result (0 || 1)
- check.c : applies all check needed for a valid map, if valid send data
- ft_atoi.c : return string with the lines number declared first line of the map
- alloc.c : memory allocate the map with check.c datas
- parsing.c : parse the string and determine possible squares (struct: int size, int start, int fin)
- sort.c : sort the int in the struct array provided by the parsing and get the biggest int, start sort
at the end.
- fill.c : fill the square in the determinated area, take the file, store it modify precisely each char
and save the file, finaly print it.

Stocker les valeurs de détection, à la fin du parsing total de la map récupérer le chuck associé
à la valeur max.

Parsing avec une string précisement malloc au préalable,
check chaque ligne, savoir la longeur max libre et regarder autant de lines que de longeur
en dessous pour savoir si tout est libre, sinon, recommencer à la ligne inférieur.
Stocker les coordonnées sous forme d'une int dans une struct, puis récupérer comparer
les plus grandes valeurs, ainsi récupérer la plus grande avec sa position puis remplir la zone.